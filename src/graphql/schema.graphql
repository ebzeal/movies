input LoginUserInput {
  userName: String
  email: String
  password:  String!
}

input CreateUserInput {
  userName: String!
  email: String!
  password:  String!
  confirmPassword: String!
}

input changePasswordInput {
  id: ID!
  password:  String
}

input CreateMovieInput {
  name: String!
  description: String
  director: String
  releaseDate: String
}

input UpdateMovieInput {
  id: ID!
  name: String
  description: String
  director: String
  releaseDate: String
}

input QueryMovieInput {
  id: ID
  name: String
  description: String
}

input CreateReviewInput {
  movieId: Int!
  rating: Int!
  comment: String
}

input UpdateReviewInput {
  id: ID!
  rating: Int
  comment: String
}


type User {
  userName: String!
  email: String!
  movies: [Movie]
  id: Int
}

type Movie {
  name: String!
  description: String
  director: String
  releaseDate: String
  reviews: [MovieReview]
  id: Int
}

type Review {
  user: Int
  movie: Int
  rating: Int
  comment: String
  id: Int
}

type MovieReview {
  user: User
  rating: Int
  comment: String
  id: Int
}

type AuthPayload {
  token: String
  user: User
}

type Response {
  message: String
}

type Mutation {
  createUser(input: CreateUserInput!): User
  loginUser(input: LoginUserInput!): AuthPayload
  changePassword(input: changePasswordInput!): User
  createMovie(input: CreateMovieInput!): Movie
  updateMovie(input: UpdateMovieInput!): Movie
  deleteMovie(id: ID!): Response
  createReview(input: CreateReviewInput!): Review
  updateReview(input: UpdateReviewInput): Review
  deleteReview(id: ID!): Response
}


  type Query {
    movies: [Movie!]
    movie(input: QueryMovieInput!): Movie
    movieReviews(movieId: ID!):[MovieReview!]
  }

